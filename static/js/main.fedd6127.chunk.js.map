{"version":3,"sources":["components/searchBar/SearchBar.jsx","components/searchList/SearchList.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","updateList","word","updateWord","useEffect","ac","AbortController","Promise","all","axios","get","then","response","list","data","items","issuesList","forEach","element","push","JSON","stringify","catch","ex","console","error","abort","className","name","type","placeholder","onChange","e","preventDefault","target","value","onWordChange","SearchList","issue","log","title","App","useState","map","parse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA2CeA,EAxCG,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WA0BlC,OApBAC,qBAAU,WACN,GAAGF,EAAK,CACJ,IAAMG,EAAK,IAAIC,gBAYf,OAXAC,QAAQC,IAAI,CACZC,IAAMC,IAAN,iDAAoDR,MACjDS,MAAK,SAACC,GACL,IAAMC,EAAOD,EAAS,GAAGE,KAAKC,MAC1BC,EAAa,GACjBH,EAAKI,SAAQ,SAAAC,GACTF,EAAWG,KAAKC,KAAKC,UAAUH,OAEnCjB,EAAW,GAAD,OAAKe,OAElBM,OAAM,SAAAC,GAAE,OAAIC,QAAQC,MAAMF,MACpB,kBAAMlB,EAAGqB,YAErB,CAACxB,IAKA,qBAAKyB,UAAU,gBAAf,SACI,uBACIA,UAAU,mBACVC,KAAK,OACLC,KAAK,OACLC,YAAY,QACZC,SAAY,SAAAC,GAAC,OAhCzB,SAAsBA,GAClBA,EAAEC,iBACF9B,EAAW6B,EAAEE,OAAOC,OA8BKC,CAAaJ,SCtB/BK,EAZI,SAAC,GAAkB,IAAjBnC,EAAgB,EAAhBA,KAAKoC,EAAW,EAAXA,MAKtB,OAHAd,QAAQe,IAAID,GAIR,qBAAKX,UAAU,wBAAf,mBACQzB,EADR,aACiBoC,EAAME,UCuBhBC,MA1Bf,WAEE,MAAiCC,mBAAS,IAA1C,mBAAO1B,EAAP,KAAmBf,EAAnB,KACA,EAA2ByC,mBAAS,IAApC,mBAAOxC,EAAP,KAAaC,EAAb,KAGA,OACI,sBAAKwB,UAAU,WAAf,UACE,cAAC,EAAD,CACE1B,WAAcA,EACdC,KAAQA,EACRC,WAAcA,IAEhB,qBAAKwB,UAAU,mBAAf,SACCX,EAAW2B,KAAI,SAACL,GAAD,OACd,cAAC,EAAD,CACEpC,KAAQA,EACRoC,MAASlB,KAAKwB,MAAMN,cCXjBO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fedd6127.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst SearchBar = ({updateList, word, updateWord}) => {\n    function onWordChange(e){\n        e.preventDefault();\n        updateWord(e.target.value);\n    }\n\n    useEffect(() => {\n        if(word){\n            const ac = new AbortController();\n            Promise.all([\n            axios.get(`https://api.github.com/search/issues?q=${word}`)\n            ]).then((response) => {\n                const list = response[0].data.items;\n                let issuesList = []\n                list.forEach(element => {\n                    issuesList.push(JSON.stringify(element));\n                });\n                updateList([...issuesList]);\n            })\n            .catch(ex => console.error(ex));\n            return () => ac.abort(); // Abort both fetches on unmount\n        }\n    }, [word]);\n\n\n    \n    return(\n        <div className=\"centered mt-1\">\n            <input \n                className=\"col-4 h-1 b-gray\"\n                name=\"word\"\n                type=\"text\"\n                placeholder=\"Serch\"\n                onChange = {e => onWordChange(e)}\n            />\n            \n        </div>\n    );\n}\n\nexport default SearchBar;","import React from 'react'\n\nconst SearchList = ({word,issue}) => {\n\n    console.log(issue);\n    \n\n    return (\n        <div className=\"display-ib searchList\">\n            {`${word}: ${issue.title}`}\n        </div>\n    )\n}\n\nexport default SearchList;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport  SearchBar from './components/searchBar/SearchBar'\nimport  SearchList from './components/searchList/SearchList'\nimport Fragment from 'react'\n\nfunction App() {\n\n  const [issuesList, updateList] = useState([]);\n  const [word, updateWord] = useState(\"\");\n\n\n  return (\n      <div className=\"centered\">\n        <SearchBar \n          updateList = {updateList}\n          word = {word}\n          updateWord = {updateWord}\n        />\n        <div className=\"col-4 display-ib\">\n        {issuesList.map((issue) => (\n          <SearchList \n            word = {word}\n            issue = {JSON.parse(issue)}\n          />\n        ))}\n        </div>\n\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}